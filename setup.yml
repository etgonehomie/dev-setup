# Setup for Mac.
# TODO: Make this dynamic for a linux setup

- name: Set up a development workstation
  hosts: localhost
  # become: true  # Run tasks with sudo
  gather_facts: yes  # don't gather system facts

  vars:
    # Destination system paths
    dotfile_local_dir: "{{ ansible_env.HOME }}/.config"
    git_global_local_dir: "{{ dotfile_local_dir }}/git/.gitignore_global"
    oh_my_posh_themes_local_dir: "{{ dotfile_local_dir }}/oh-my-posh/themes"
    oh_my_posh_theme_filename: 'zen.toml'

    # Source paths of dotfile templates
    gitignore_global_git_url: "https://raw.githubusercontent.com/etgonehomie/dev-setup/refs/heads/main/dotfiles/.gitignore_global"
    gitconfig__global_git_url: "https://raw.githubusercontent.com/etgonehomie/dev-setup/refs/heads/main/dotfiles/.gitignore_global"
    raycast_config_url: "https://raw.githubusercontent.com/etgonehomie/dev-setup/refs/heads/main/dotfiles/.gitignore_global"
    zshrc_git_url: "https://raw.githubusercontent.com/etgonehomie/dev-setup/refs/heads/main/dotfiles/.gitignore_global"
    zshenv_git_url: "https://raw.githubusercontent.com/etgonehomie/dev-setup/refs/heads/main/dotfiles/.gitignore_global"
    oh_my_posh_theme_git_url: "https://raw.githubusercontent.com/etgonehomie/dev-setup/refs/heads/main/zen-mod.toml"
    
    
    tasks_brew_cli:
      - package: curl 
        description: "Allows download of external binaries"
      - package: eza
        description: "A better `ls` command that has colors" 
      - package: fzf 
        description: "Allows fuzzy search (and case insensitivity) in terminal"
      - package: bat
        description: "View file content with syntax highlighting (cat replacement)"
      - package: zsh-autosuggestions
        description: "CLI history suggestions"
      - package: zsh-autocomplete
        description: "CLI command autocomplete"
      - package: zsh-fast-syntax-highlighting
        description: "Syntax highlighting for CLI commands"
      - package: neovim
        description: "Terminal text editor (vim replacement)"
      - package: oh-my-posh 
        description: "Prompt theme engine for any shell"
      - package: font-hack-nerd-font 
        description: "Font needed for oh-my-posh to work"

    tasks_brew_dev:
      - package: iterm2
        description: "Terminal GUI replacement"
      - package: git
        description: "Source code management"
      - package: python
        description: "Data Engineer/Science projects"
      - package: node
        description: "JS development"
      - package: docker
        description: "Containerize depoloyments"

    tasks_cask_dev:
      - package: visual-studio-code
        description: "VS Code: IDE"
      - package: raycast
        description: 'Raycast: Mac Finder Replacement'
      - package: postman
        description: "Postman: API Tester"
      - package: sublime-text
        description: "Sublime: Easy text file editor"
      - package: google-chrome
        description: "Chrome Browser"
      - package: firefox
        description: "Firefox Browser"
      - package: vivaldi
        description: "Vivaldi Browser"

  tasks:
    # Install necessary programs
    - name: Install Homebrew ZSH Tools via Loop
      block:
        - name: Install Homebrew ZSH Tools via Loop
          homebrew:
            name: "{{ item.package }}"
            state: present
          loop: "{{ tasks_brew_cli }}"

    - name: Install Homebrew Dev Tools via Loop
      block:
        - name: Install Homebrew Dev Tools via Loop
          homebrew:
            name: "{{ item.package }}"
            state: present
          loop: "{{ tasks_brew_dev }}"

    - name: Install Homebrew Cask Apps via Loop
      block:
        - name: Install Homebrew Cask Apps via Loop
          homebrew_cask:
            name: "{{ item.package }}"
            state: present
            ignore_errors:
          loop: "{{ tasks_cask_dev }}"

    # Setup homebrew to work with CLI plugins
    
    - name: Detect Homebrew prefix dynamically
      ansible.builtin.shell: "brew --prefix"
      register: brew_prefix_result
      changed_when: false  # Read-only check
      become: no

    - name: Set Homebrew prefix fact
      ansible.builtin.set_fact:
        brew_prefix: "{{ brew_prefix_result.stdout }}"

    - name: Remove group/other write perms from dynamic Zsh dir
      ansible.builtin.file:
        path: "{{ brew_prefix }}/share"
        mode: "go-w"  # Removes write for group and others (e.g., 775 -> 755)
        recurse: yes  # Equivalent to -R
      become: yes  # Equivalent to sudo

    # Update terminal files
    - name: Download and store the .zshenv file from GitHub
      get_url:
        url: "{{ zshenv_git_url }}"
        dest: "{{ ansible_env.HOME }}"

    - name: Download and store the .zshrc file from GitHub
      get_url:
        url: "{{ zshrc_git_url }}"
        dest: "{{ ansible_env.HOME }}"

    # Update global git file
    - name: Create dir `~/.config/git` if DNE. Place all git dotfiles here
      file:
        path: "{{ git_global_local_dir }}"
        state: directory

    - name: Download and create the global .gitconfig file from GitHub
      get_url:
        url: "{{ gitconfig_global_git_url }}"
        dest: "{{ git_global_local_dir }}"

    - name: Download and create the global .gitignore file from GitHub
      get_url:
        url: "{{ gitignore_global_git_url }}"
        dest: "{{ git_global_local_dir }}"

    - name: Modify .gitconfig file to use the global .gitignore_global
      git_config:
        name: core.excludesfile
        value: "{{ gitignore_global_path }}/.gitignore_global"
        scope: global

    # Update terminal theming using oh-my-posh    
    - name: Create dir `~/[brew-prefix]/share/oh-my-posh/themes` if DNE. Place original oh-my-posh themes here
      file:
        path: "{{ brew_prefix/share/oh-my-posh/themes }}"
        state: directory

    - name: Copy oh-my-posh zen theme and place in brew dir
      get_url:
        url: '{{ oh_my_posh_theme_git_url }}'
        dest: '{{ brew_prefix }}/share/oh-my-posh/themes/{{ oh_my_posh_theme_filename }}'

    # Can place my theme in a new dir in ~/.config/oh-my-posh and point the zshrc file to this
    # Leave the theme in brew dir and just store a reference to the themes in .config dir
    # This allows easy search of all themes if I want to change
    - name: Create dir `~/.config/oh-my-posh` if DNE. Place ref of oh-my-posh themes here
      file:
        path: "{{ ansible_env.HOME }}/.config/oh-my-posh/themes"
        state: directory

    - name: Create a symbolic link for oh_my_posh themes dir
      file:
        src: '{{ brew_prefix | trim }}/share/oh-my-posh/themes'
        dest: "{{ oh_my_posh_themes_local_dir }}"
        state: link
    
    - name: Download and store the encrypted raycast config file from GitHub
      get_url:
        url: "{{ raycast_config_url }}"
        dest: "{{ ansible_env.HOME }}"
    - name: Import Raycast configuration
      vars:
        rayconfig_file: "{{ ansible_env.HOME }}/raycast_config.rayconfig"  # Name for exported file
      tasks:
        - name: Import Raycast configuration
          ansible.builtin.script: |
            #!/usr/bin/osascript
            tell application "Raycast"
              activate
              tell application "System Events"
                keystroke "," using {command down}  # Open Preferences
                delay 1
                keystroke "Import Preferences & Data"  # Type command
                delay 1
                keystroke return  # Trigger import
                delay 2
                keystroke "/Users/{{ ansible_user_id }}/{{ rayconfig_file }}"  # Set import path
                delay 1
                keystroke return  # Import
                keystroke "Password"  # Input password for encrypted file
                delay 1
                keystroke return  # Finish import
              end tell
            end tell
          args:
            executable: /usr/bin/osascript
  
  #TODO: Need to add this backup as a separate script 
  # Store the output in a file that can be stored in git to be copied and imported
- name: Backup safe macOS defaults including key bindings and hardware settings
  vars:
    backup_dir: "{{ ansible_env.HOME }}/macos_config_backup"
    safe_domains:  
      # UI Settings
      - "com.apple.dock"              # dock settings
      - "com.apple.finder"            # finder preferences
      - "com.apple.systemuiserver"    # menu bar settings
      - "com.apple.menuextra.clock"   # menubar clock settings
      - "com.apple.screensaver"       # screen saver settings
      - "com.apple.terminal"          # terminal settings

      # Input Devices
      - "com.apple.keyboard"                  # keyboard settings
      - "com.apple.HIToolbox"                 # system keyboard hotkeys
      - "com.apple.symbolichotkeys"           # other keyboard hotkeys
      - "com.apple.AppleMultitouchTrackpad"   # built-in trackpad settings
      - "com.apple.driver.AppleHIDMouse"      # bluetooth mouse settings
      - "com.apple.driver.AppleBluetoothMultitouch.trackpad" # bluetooth trackpad settings
      
      # Workflow tools
      - "com.raycast.macos"   # raycast hotkeys
      - "com.apple.spaces"    # mission control settings

      # Display/Power settings
      - "com.apple.PowerManagement" 
      - "com.apple.CoreBrightness"    # Night shift schedule
      - "com.apple.BezelServices"     # Display brightness settings
      
      # Other Settings
      - "com.apple.desktopservices"       # desktop and finder behavior
      - "com.apple.universalaccess"       # accessibility settings
      - "com.apple.notificationcenterui"  # notification settings

  tasks:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: "0700"

    - name: Export safe defaults
      ansible.builtin.shell: "defaults read {{ item }} > {{ backup_dir }}/{{ item | replace('.', '_') }}.txt"
      loop: "{{ safe_domains }}"
      args:
        creates: "{{ backup_dir }}/{{ item | replace('.', '_') }}.txt"
      become: no

    - name: Encrypt backups with Ansible Vault
      ansible.builtin.shell: "ansible-vault encrypt {{ backup_dir }}/{{ item | replace('.', '_') }}.txt --vault-password-file ~/.vault_pass.txt"
      loop: "{{ safe_domains }}"
      become: no
      when: ansible_vault_enabled | default(false)

    # TODO: This is the actual import that is needed in this script
    - name: Import macOS configs from backup directory
      vars:
        backup_dir: "{{ ansible_env.HOME }}/macos_config_backup"
      tasks:
        - name: Find all .txt files in backup directory
          ansible.builtin.find:
            paths: "{{ backup_dir }}"
            patterns: "*.txt"  # Match all .txt files
            recurse: no  # Only top-level files
          register: backup_files

        - name: Convert and copy each .txt file to .plist in Preferences to replace existing
          ansible.builtin.shell: |
            plutil -convert xml1 -o "{{ ansible_env.HOME }}/Library/Preferences/{{ item.path | basename | replace('_', '.') | regex_replace('\\.txt$', '.plist') }}" "{{ item.path }}"
          loop: "{{ backup_files.files }}"
          register: convert_result
          changed_when: convert_result.rc == 0  # Mark as changed if successful

        - name: Restart affected apps to apply changes
          ansible.builtin.shell: "killall {{ item }}"
          loop:
            - "Dock"
            - "Finder"
            - "Terminal"
            - "Raycast"
          become: no
          ignore_errors: yes  # Ignore if app isn’t running

